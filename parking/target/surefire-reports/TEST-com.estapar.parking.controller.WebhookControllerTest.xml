<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.estapar.parking.controller.WebhookControllerTest" time="2.943" tests="26" errors="11" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Projeto\parking\target\test-classes;C:\Projeto\parking\target\classes;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.2.0\spring-boot-starter-web-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.0\spring-boot-starter-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot\3.2.0\spring-boot-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.0\spring-boot-autoconfigure-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.0\spring-boot-starter-logging-3.2.0.jar;C:\Users\will_\.m2\repository\ch\qos\logback\logback-classic\1.4.11\logback-classic-1.4.11.jar;C:\Users\will_\.m2\repository\ch\qos\logback\logback-core\1.4.11\logback-core-1.4.11.jar;C:\Users\will_\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\will_\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\will_\.m2\repository\org\slf4j\jul-to-slf4j\2.0.9\jul-to-slf4j-2.0.9.jar;C:\Users\will_\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\will_\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.0\spring-boot-starter-json-3.2.0.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.3\jackson-datatype-jdk8-2.15.3.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.3\jackson-module-parameter-names-2.15.3.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.2.0\spring-boot-starter-tomcat-3.2.0.jar;C:\Users\will_\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.16\tomcat-embed-core-10.1.16.jar;C:\Users\will_\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.16\tomcat-embed-el-10.1.16.jar;C:\Users\will_\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.16\tomcat-embed-websocket-10.1.16.jar;C:\Users\will_\.m2\repository\org\springframework\spring-web\6.1.1\spring-web-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-beans\6.1.1\spring-beans-6.1.1.jar;C:\Users\will_\.m2\repository\io\micrometer\micrometer-observation\1.12.0\micrometer-observation-1.12.0.jar;C:\Users\will_\.m2\repository\io\micrometer\micrometer-commons\1.12.0\micrometer-commons-1.12.0.jar;C:\Users\will_\.m2\repository\org\springframework\spring-webmvc\6.1.1\spring-webmvc-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-aop\6.1.1\spring-aop-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-context\6.1.1\spring-context-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-expression\6.1.1\spring-expression-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.2.0\spring-boot-starter-data-jpa-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.2.0\spring-boot-starter-aop-3.2.0.jar;C:\Users\will_\.m2\repository\org\aspectj\aspectjweaver\1.9.20.1\aspectjweaver-1.9.20.1.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.2.0\spring-boot-starter-jdbc-3.2.0.jar;C:\Users\will_\.m2\repository\com\zaxxer\HikariCP\5.0.1\HikariCP-5.0.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-jdbc\6.1.1\spring-jdbc-6.1.1.jar;C:\Users\will_\.m2\repository\org\hibernate\orm\hibernate-core\6.3.1.Final\hibernate-core-6.3.1.Final.jar;C:\Users\will_\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\will_\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\will_\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\will_\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\will_\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\will_\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\will_\.m2\repository\net\bytebuddy\byte-buddy\1.14.10\byte-buddy-1.14.10.jar;C:\Users\will_\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.4\jaxb-runtime-4.0.4.jar;C:\Users\will_\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.4\jaxb-core-4.0.4.jar;C:\Users\will_\.m2\repository\org\eclipse\angus\angus-activation\2.0.1\angus-activation-2.0.1.jar;C:\Users\will_\.m2\repository\org\glassfish\jaxb\txw2\4.0.4\txw2-4.0.4.jar;C:\Users\will_\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\will_\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\will_\.m2\repository\org\antlr\antlr4-runtime\4.10.1\antlr4-runtime-4.10.1.jar;C:\Users\will_\.m2\repository\org\springframework\data\spring-data-jpa\3.2.0\spring-data-jpa-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\data\spring-data-commons\3.2.0\spring-data-commons-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\spring-orm\6.1.1\spring-orm-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-tx\6.1.1\spring-tx-6.1.1.jar;C:\Users\will_\.m2\repository\org\slf4j\slf4j-api\2.0.9\slf4j-api-2.0.9.jar;C:\Users\will_\.m2\repository\org\springframework\spring-aspects\6.1.1\spring-aspects-6.1.1.jar;C:\Users\will_\.m2\repository\com\mysql\mysql-connector-j\8.1.0\mysql-connector-j-8.1.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.0\spring-boot-starter-test-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-test\3.2.0\spring-boot-test-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.0\spring-boot-test-autoconfigure-3.2.0.jar;C:\Users\will_\.m2\repository\com\jayway\jsonpath\json-path\2.8.0\json-path-2.8.0.jar;C:\Users\will_\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.1\jakarta.xml.bind-api-4.0.1.jar;C:\Users\will_\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.2\jakarta.activation-api-2.1.2.jar;C:\Users\will_\.m2\repository\net\minidev\json-smart\2.5.0\json-smart-2.5.0.jar;C:\Users\will_\.m2\repository\net\minidev\accessors-smart\2.5.0\accessors-smart-2.5.0.jar;C:\Users\will_\.m2\repository\org\ow2\asm\asm\9.3\asm-9.3.jar;C:\Users\will_\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\will_\.m2\repository\org\awaitility\awaitility\4.2.0\awaitility-4.2.0.jar;C:\Users\will_\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\will_\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.1\junit-jupiter-5.10.1.jar;C:\Users\will_\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.1\junit-jupiter-api-5.10.1.jar;C:\Users\will_\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\will_\.m2\repository\org\junit\platform\junit-platform-commons\1.10.1\junit-platform-commons-1.10.1.jar;C:\Users\will_\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\will_\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.1\junit-jupiter-params-5.10.1.jar;C:\Users\will_\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.1\junit-jupiter-engine-5.10.1.jar;C:\Users\will_\.m2\repository\org\junit\platform\junit-platform-engine\1.10.1\junit-platform-engine-1.10.1.jar;C:\Users\will_\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\will_\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.10\byte-buddy-agent-1.14.10.jar;C:\Users\will_\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\will_\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\will_\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\will_\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-core\6.1.1\spring-core-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-jcl\6.1.1\spring-jcl-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-test\6.1.1\spring-test-6.1.1.jar;C:\Users\will_\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.3\jackson-datatype-jsr310-2.15.3.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.3\jackson-annotations-2.15.3.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.3\jackson-core-2.15.3.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.3\jackson-databind-2.15.3.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="America/Sao_Paulo"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Windows 10"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="BR"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-21\bin"/>
    <property name="sun.java.command" value="C:\Users\will_\AppData\Local\Temp\surefire8216041760031315398\surefirebooter-20251027171630602_3.jar C:\Users\will_\AppData\Local\Temp\surefire8216041760031315398 2025-10-27T17-16-30_082-jvmRun1 surefire-20251027171630602_1tmp surefire_0-20251027171630602_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Projeto\parking\target\test-classes;C:\Projeto\parking\target\classes;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.2.0\spring-boot-starter-web-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.0\spring-boot-starter-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot\3.2.0\spring-boot-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.0\spring-boot-autoconfigure-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.0\spring-boot-starter-logging-3.2.0.jar;C:\Users\will_\.m2\repository\ch\qos\logback\logback-classic\1.4.11\logback-classic-1.4.11.jar;C:\Users\will_\.m2\repository\ch\qos\logback\logback-core\1.4.11\logback-core-1.4.11.jar;C:\Users\will_\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\will_\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\will_\.m2\repository\org\slf4j\jul-to-slf4j\2.0.9\jul-to-slf4j-2.0.9.jar;C:\Users\will_\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\will_\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.0\spring-boot-starter-json-3.2.0.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.3\jackson-datatype-jdk8-2.15.3.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.3\jackson-module-parameter-names-2.15.3.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.2.0\spring-boot-starter-tomcat-3.2.0.jar;C:\Users\will_\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.16\tomcat-embed-core-10.1.16.jar;C:\Users\will_\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.16\tomcat-embed-el-10.1.16.jar;C:\Users\will_\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.16\tomcat-embed-websocket-10.1.16.jar;C:\Users\will_\.m2\repository\org\springframework\spring-web\6.1.1\spring-web-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-beans\6.1.1\spring-beans-6.1.1.jar;C:\Users\will_\.m2\repository\io\micrometer\micrometer-observation\1.12.0\micrometer-observation-1.12.0.jar;C:\Users\will_\.m2\repository\io\micrometer\micrometer-commons\1.12.0\micrometer-commons-1.12.0.jar;C:\Users\will_\.m2\repository\org\springframework\spring-webmvc\6.1.1\spring-webmvc-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-aop\6.1.1\spring-aop-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-context\6.1.1\spring-context-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-expression\6.1.1\spring-expression-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.2.0\spring-boot-starter-data-jpa-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.2.0\spring-boot-starter-aop-3.2.0.jar;C:\Users\will_\.m2\repository\org\aspectj\aspectjweaver\1.9.20.1\aspectjweaver-1.9.20.1.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.2.0\spring-boot-starter-jdbc-3.2.0.jar;C:\Users\will_\.m2\repository\com\zaxxer\HikariCP\5.0.1\HikariCP-5.0.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-jdbc\6.1.1\spring-jdbc-6.1.1.jar;C:\Users\will_\.m2\repository\org\hibernate\orm\hibernate-core\6.3.1.Final\hibernate-core-6.3.1.Final.jar;C:\Users\will_\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\will_\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\will_\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\will_\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\will_\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\will_\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\will_\.m2\repository\net\bytebuddy\byte-buddy\1.14.10\byte-buddy-1.14.10.jar;C:\Users\will_\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.4\jaxb-runtime-4.0.4.jar;C:\Users\will_\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.4\jaxb-core-4.0.4.jar;C:\Users\will_\.m2\repository\org\eclipse\angus\angus-activation\2.0.1\angus-activation-2.0.1.jar;C:\Users\will_\.m2\repository\org\glassfish\jaxb\txw2\4.0.4\txw2-4.0.4.jar;C:\Users\will_\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\will_\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\will_\.m2\repository\org\antlr\antlr4-runtime\4.10.1\antlr4-runtime-4.10.1.jar;C:\Users\will_\.m2\repository\org\springframework\data\spring-data-jpa\3.2.0\spring-data-jpa-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\data\spring-data-commons\3.2.0\spring-data-commons-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\spring-orm\6.1.1\spring-orm-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-tx\6.1.1\spring-tx-6.1.1.jar;C:\Users\will_\.m2\repository\org\slf4j\slf4j-api\2.0.9\slf4j-api-2.0.9.jar;C:\Users\will_\.m2\repository\org\springframework\spring-aspects\6.1.1\spring-aspects-6.1.1.jar;C:\Users\will_\.m2\repository\com\mysql\mysql-connector-j\8.1.0\mysql-connector-j-8.1.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.0\spring-boot-starter-test-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-test\3.2.0\spring-boot-test-3.2.0.jar;C:\Users\will_\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.0\spring-boot-test-autoconfigure-3.2.0.jar;C:\Users\will_\.m2\repository\com\jayway\jsonpath\json-path\2.8.0\json-path-2.8.0.jar;C:\Users\will_\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.1\jakarta.xml.bind-api-4.0.1.jar;C:\Users\will_\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.2\jakarta.activation-api-2.1.2.jar;C:\Users\will_\.m2\repository\net\minidev\json-smart\2.5.0\json-smart-2.5.0.jar;C:\Users\will_\.m2\repository\net\minidev\accessors-smart\2.5.0\accessors-smart-2.5.0.jar;C:\Users\will_\.m2\repository\org\ow2\asm\asm\9.3\asm-9.3.jar;C:\Users\will_\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\will_\.m2\repository\org\awaitility\awaitility\4.2.0\awaitility-4.2.0.jar;C:\Users\will_\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\will_\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.1\junit-jupiter-5.10.1.jar;C:\Users\will_\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.1\junit-jupiter-api-5.10.1.jar;C:\Users\will_\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\will_\.m2\repository\org\junit\platform\junit-platform-commons\1.10.1\junit-platform-commons-1.10.1.jar;C:\Users\will_\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\will_\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.1\junit-jupiter-params-5.10.1.jar;C:\Users\will_\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.1\junit-jupiter-engine-5.10.1.jar;C:\Users\will_\.m2\repository\org\junit\platform\junit-platform-engine\1.10.1\junit-platform-engine-1.10.1.jar;C:\Users\will_\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\will_\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.10\byte-buddy-agent-1.14.10.jar;C:\Users\will_\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\will_\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\will_\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\will_\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-core\6.1.1\spring-core-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-jcl\6.1.1\spring-jcl-6.1.1.jar;C:\Users\will_\.m2\repository\org\springframework\spring-test\6.1.1\spring-test-6.1.1.jar;C:\Users\will_\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.3\jackson-datatype-jsr310-2.15.3.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.3\jackson-annotations-2.15.3.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.3\jackson-core-2.15.3.jar;C:\Users\will_\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.3\jackson-databind-2.15.3.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\will_"/>
    <property name="user.language" value="pt"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-21"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Projeto\parking"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\will_\AppData\Local\Temp\surefire8216041760031315398\surefirebooter-20251027171630602_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.8+12-LTS-250"/>
    <property name="user.name" value="will_"/>
    <property name="stdout.encoding" value="Cp1252"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\will_\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\will_\AppData\Local\Temp\"/>
    <property name="java.version" value="21.0.8"/>
    <property name="user.dir" value="C:\Projeto\parking"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="16908"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-21\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Python314\Scripts\;C:\Python314\;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\ProgramData\chocolatey\bin;C:\Maven\apache-maven-3.9.11\bin;C:\Program Files\Java\jdk-21\bin;;C:\Program Files\Docker\Docker\resources\bin;C:\Users\will_\AppData\Local\Microsoft\WindowsApps;C:\Users\will_\AppData\Roaming\npm;C:\Users\will_\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\Java\jdk-21\bin;C:\Maven\apache-maven-3.9.11\bin;;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="21.0.8+12-LTS-250"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[estapar-parking] "/>
  </properties>
  <testcase name="testHandleEventTypeWithSpaces" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.045">
    <system-out><![CDATA[2025-10-27T17:16:48.392-03:00  INFO 16908 --- [estapar-parking] [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.estapar.parking.controller.WebhookControllerTest]: WebhookControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-10-27T17:16:48.433-03:00  INFO 16908 --- [estapar-parking] [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.estapar.parking.ParkingApplication for test class com.estapar.parking.controller.WebhookControllerTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.0)

2025-10-27T17:16:48.762-03:00  INFO 16908 --- [estapar-parking] [           main] c.e.p.controller.WebhookControllerTest   : Starting WebhookControllerTest using Java 21.0.8 with PID 16908 (started by will_ in C:\Projeto\parking)
2025-10-27T17:16:48.763-03:00 DEBUG 16908 --- [estapar-parking] [           main] c.e.p.controller.WebhookControllerTest   : Running with Spring Boot v3.2.0, Spring v6.1.1
2025-10-27T17:16:48.773-03:00  INFO 16908 --- [estapar-parking] [           main] c.e.p.controller.WebhookControllerTest   : No active profile set, falling back to 1 default profile: "default"
2025-10-27T17:16:50.097-03:00  INFO 16908 --- [estapar-parking] [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2025-10-27T17:16:50.097-03:00  INFO 16908 --- [estapar-parking] [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2025-10-27T17:16:50.099-03:00  INFO 16908 --- [estapar-parking] [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 2 ms
2025-10-27T17:16:50.134-03:00  INFO 16908 --- [estapar-parking] [           main] c.e.p.controller.WebhookControllerTest   : Started WebhookControllerTest in 1.693 seconds (process running for 19.036)

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"132"]
             Body = {"license_plate":"ABC1234","entry_time":"2025-10-27T17:16:50.2063194","exit_time":null,"event_type":" ENTRY ","lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleEntryVehicleAlreadyParkedException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.062">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"130"]
             Body = {"license_plate":"ABC1234","entry_time":"2025-10-27T17:16:50.2841241","exit_time":null,"event_type":"ENTRY","lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 409
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleEntryGenericException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.081">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"130"]
             Body = {"license_plate":"ABC1234","entry_time":"2025-10-27T17:16:50.3543933","exit_time":null,"event_type":"ENTRY","lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 500
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleInvalidEventType" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.015">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"112"]
             Body = {"license_plate":"ABC1234","entry_time":null,"exit_time":null,"event_type":"INVALID_TYPE","lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleExitSuccess" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.075">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleExit(ParkingService.java:138)
	at com.estapar.parking.controller.WebhookControllerTest.testHandleExitSuccess(WebhookControllerTest.java:129)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleParkedLowerCase" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.03">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleParked(ParkingService.java:95)
	at com.estapar.parking.controller.WebhookControllerTest.testHandleParkedLowerCase(WebhookControllerTest.java:389)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleExitVehicleNotFoundException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.019">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"129"]
             Body = {"license_plate":"ABC1234","entry_time":null,"exit_time":"2025-10-27T17:16:50.5598346","event_type":"EXIT","lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testOnlyParkedCallsHandleParked" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.011">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleEntry(ParkingService.java:38)
	at com.estapar.parking.controller.WebhookControllerTest.testOnlyParkedCallsHandleParked(WebhookControllerTest.java:530)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleNullEventType" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.018">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"102"]
             Body = {"license_plate":"ABC1234","entry_time":null,"exit_time":null,"event_type":null,"lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleCompleteSequence" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.009">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleEntry(ParkingService.java:38)
	at com.estapar.parking.controller.WebhookControllerTest.testHandleCompleteSequence(WebhookControllerTest.java:476)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleEntryParkingFullException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.048">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"130"]
             Body = {"license_plate":"ABC1234","entry_time":"2025-10-27T17:16:50.6673175","exit_time":null,"event_type":"ENTRY","lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 409
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleEntryLowerCase" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.011">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleEntry(ParkingService.java:38)
	at com.estapar.parking.controller.WebhookControllerTest.testHandleEntryLowerCase(WebhookControllerTest.java:372)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testOnlyEntryCallsHandleEntry" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.017">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleEntry(ParkingService.java:38)
	at com.estapar.parking.controller.WebhookControllerTest.testOnlyEntryCallsHandleEntry(WebhookControllerTest.java:510)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleEntrySuccess" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.008">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleEntry(ParkingService.java:38)
	at com.estapar.parking.controller.WebhookControllerTest.testHandleEntrySuccess(WebhookControllerTest.java:91)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleParkedVehicleAlreadyParkedException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.03">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"118"]
             Body = {"license_plate":"ABC1234","entry_time":null,"exit_time":null,"event_type":"PARKED","lat":-23.561684,"lng":-46.655981}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 409
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleParkedVehicleNotFoundException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.069">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"118"]
             Body = {"license_plate":"ABC1234","entry_time":null,"exit_time":null,"event_type":"PARKED","lat":-23.561684,"lng":-46.655981}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleEmptyPayload" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.043">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"2"]
             Body = {}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleExitGenericException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.043">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"128"]
             Body = {"license_plate":"ABC1234","entry_time":null,"exit_time":"2025-10-27T17:16:50.973494","event_type":"EXIT","lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 500
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleParkedSuccess" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.028">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleParked(ParkingService.java:95)
	at com.estapar.parking.controller.WebhookControllerTest.testHandleParkedSuccess(WebhookControllerTest.java:110)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleParkedGenericException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.043">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"118"]
             Body = {"license_plate":"ABC1234","entry_time":null,"exit_time":null,"event_type":"PARKED","lat":-23.561684,"lng":-46.655981}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 500
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleInvalidJson" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.075">
    <system-out><![CDATA[2025-10-27T17:16:51.119-03:00  WARN 16908 --- [estapar-parking] [           main] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('i' (code 105)): was expecting double-quote to start field name]

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"14"]
             Body = {invalid json}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.http.converter.HttpMessageNotReadableException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleMultipleEntryEvents" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.024">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleEntry(ParkingService.java:38)
	at com.estapar.parking.controller.WebhookControllerTest.testHandleMultipleEntryEvents(WebhookControllerTest.java:454)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testOnlyExitCallsHandleExit" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.015">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleEntry(ParkingService.java:38)
	at com.estapar.parking.controller.WebhookControllerTest.testOnlyExitCallsHandleExit(WebhookControllerTest.java:550)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleExitLowerCase" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.008">
    <error message="&#10;Only void methods can doNothing()!&#10;Example of correct use of doNothing():&#10;    doNothing().&#10;    doThrow(new RuntimeException())&#10;    .when(mock).someVoidMethod();&#10;Above means:&#10;someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called" type="org.mockito.exceptions.base.MockitoException"><![CDATA[org.mockito.exceptions.base.MockitoException: 

Only void methods can doNothing()!
Example of correct use of doNothing():
    doNothing().
    doThrow(new RuntimeException())
    .when(mock).someVoidMethod();
Above means:
someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called
	at com.estapar.parking.service.ParkingService.handleExit(ParkingService.java:138)
	at com.estapar.parking.controller.WebhookControllerTest.testHandleExitLowerCase(WebhookControllerTest.java:406)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="testHandleEmptyEventType" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.008">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"125"]
             Body = {"license_plate":"ABC1234","entry_time":"2025-10-27T17:16:51.2698072","exit_time":null,"event_type":"","lat":null,"lng":null}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testHandleParkedParkingFullException" classname="com.estapar.parking.controller.WebhookControllerTest" time="0.012">
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /webhook
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"118"]
             Body = {"license_plate":"ABC1234","entry_time":null,"exit_time":null,"event_type":"PARKED","lat":-23.561684,"lng":-46.655981}
    Session Attrs = {}

Handler:
             Type = com.estapar.parking.controller.WebhookController
           Method = com.estapar.parking.controller.WebhookController#handleWebhook(WebhookEventDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 409
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
</testsuite>